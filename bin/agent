process.title = 'outpost-cli';

const fs = require('fs');
const util = require('util');
const path = require('path');
const http = require('http');
const utilities = require('../lib/utilities');
const Outpost = require('../lib/outpost');
const Cache = require('../lib/cache');

/**
 *  load and parse the outpost configuration
 */
function _outpostConfig(config) {
  let file = null;
  config = config || utilities.findFile('opconfig.json', __dirname);
  if (!config) {
    return {
      file: null,
      opconfig: null
    };
  }

  let conf = {};
  try {
    // either given a config as string or file name
    if (config.trim().charAt(0) !== '{') {
      file = path.resolve(path.resolve(__dirname, '..'), config);
      config = fs.readFileSync(file);
    }
    conf = JSON.parse(config);
  } catch (err) {
    console.error('failed to load outpost config: ' + err.message);
    return {
      file: null,
      opconfig: null
    };
  }

  conf.root = path.resolve(conf.root, '.outpost');
  return {
    file: file,
    opconfig: conf
  };
}


// process command line options to get the command to execute
let command = require('../lib/cli').process();

/**
 * execute a command
 */
function _handleCommand(command, cb) {

  let outpostConfig = _outpostConfig(command.opConfig);
  let opconfig = outpostConfig.opconfig;

  // run as the intended user
  let runAsResult = utilities.runAs((opconfig || {}).runas);
  if (runAsResult.error) {
    cb && cb(true, runAsResult.error);
    return;
  }

  // special handling of starting outpost in daemon mode
  if (command.type === 'daemon') {

    function _message(message) {
      if (typeof message === 'string') {
        message = {log: message};
      }

      try {
        process.send(JSON.stringify(message));
      } catch (e) {
        console.log(message);
      }
    }

    function _result(message) {
      _message({result: message})
    }

    process.title = 'outpost-agent';
    if (!opconfig) {
      _result('outpost config not specified');
      process.nextTick(function() {
        process.exit(1);
      });
      return;
    }

    // make sure the config has an agent id
    if (!opconfig.id || opconfig.id.length === 0) {
      _result('missing id in outpost config');
      process.nextTick(function() {
        process.exit(1);
      });
      return;
    }

    let outpost = new Outpost(opconfig);
    outpost.start(function(err) {
      // notify the spawner that we're ready
      _result(err || 'agent started');
      if (err) {
        process.nextTick(function() {
          process.exit(1);
        });
      }
    }, _message);

    outpost.on('close', function() {
      setImmediate(function() {
        cb();
      });
    });

    return;
  }

  // special handling of genkeys command
  if (command.type === 'genkeys') {
    console.log('generating new ' + command.curve + ' key pair...');
    let ec = new require('elliptic').ec(command.curve);
    let keyPair = ec.genKeyPair();
    let result = 'private: ' + keyPair.getPrivate('hex') + '\n' + 'public: ' + keyPair.getPublic(true, 'hex');
    cb && cb(null, result);
    return;
  }

  // special handling of module commands
  if (command.type === 'module') {
    switch (command.action) {
      case 'pack':
        let cache = new Cache({});
        cache.pack(command, function(err, filename) {
          if (err) {
            cb('module creation failed', err);
          } else {
            cb(null, 'module created at ' + filename);
          }
        });
        break;
    }
    return;
  }

  // special handling of agent commands
  if (command.type === 'agent') {
    switch (command.action) {

      case 'init':
        let defaults = opconfig || {};
        if (command.options.defaults) {
          let elems = command.options.defaults.split(',');
          elems.forEach(function(e) {
            let parts = e.split('=');
            defaults[parts[0].trim()] = parts.length > 1 ? parts[1].trim() : '.';
          });
        }
        require('../lib/init-config').initConfig(defaults, function(result) {
          if (result) {
            // save the config
            let output = command.options.output || outpostConfig.file || path.resolve(process.cwd(), 'opconfig.json');
            try {
              fs.writeFileSync(output, JSON.stringify(result, null, 2));
              cb(null, 'outpost configuration saved to ' + output);
            } catch (err) {
              cb('error', 'error writing configuration: ' + err.message);
            }
          }
        });
        return;

      case 'config':
        console.log(JSON.stringify(opconfig, null, 2));
        return;

      case 'unregister':
        let outpostTmp = new Outpost(opconfig);
        outpostTmp.init(function() {
          outpostTmp.processTopLevel({type: 'unregister'}, function(result, details) {
            cb && cb(result !== 'success', details);
          });
        });
        return;

      case 'restart':
        _handleCommand({type: 'agent', action: 'stop', silent: true}, function(err, message) {
          if (message) {
            console.log(message);
          }
          _handleCommand({type: 'agent', action: 'start'}, function(err, message) {
            cb && cb(err, message);
          });
        });

        return;

      case 'start':
        let args = [__filename, '--daemon'];
        if (command.opConfig) {
          args.push('--opconfig');
          args.push(command.opConfig);
        }
        let logFile = path.resolve(opconfig.root, 'outpost.log');
        let outFile = fs.openSync(logFile, 'a');
        let errFile = fs.openSync(logFile, 'a');
        let child = require('child_process').spawn(process.execPath, args, {
          cwd: path.resolve(__dirname, '..'),
          env: process.env,
          stdio: ['ignore', outFile, errFile, 'ipc'],
          detached: true
        });
        fs.closeSync(outFile);
        fs.closeSync(errFile);

        child.on('message', function(message) {
          message = JSON.parse(message);
          if (message.log) {
            console.log(message.log);
            return;
          }

          child.disconnect();
          child.unref();
          message = message.result;
          if (message === 'agent started' || message === 'agent is already running') {
            cb && cb(null, message);
          } else {
            cb && cb('error', message);
          }
        });
        return;

      case 'stop':
        command.silent = true;
        break;
    }
  }

  // all other commands are sent to the agent
  if (!opconfig) {
    cb('error', 'outpost config not specified');
    return;
  }
  delete command.opConfig;
  let postData = JSON.stringify(command);

  let requestOptions = {
    hostname: '127.0.0.1',
    port: (opconfig && opconfig.cliport) || Outpost.prototype.CLIPORT,
    path: '/',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': postData.length
    }
  };

  let req = http.request(requestOptions, function(res) {
    res.on('data', function(data) {
      process.stdout.write(data);
    });

    res.on('end', function() {
      let result = res.trailers['command-result'];
      if (result) {
        result = JSON.parse(result);
      } else {
        result = {result: 'error', msg: 'missing command result'};
      }
      cb && cb(result.result === 'error', result.msg);
    });
  });

  req.on('socket', function(socket) {
    socket.setKeepAlive(true);
  });

  req.on('error', function(e) {
    let message = 'error communicating with the outpost agent: ' + e.message;
    if (e.code === 'ECONNREFUSED') {
      message = 'agent not running';
    }
    cb && cb('error', message);
  });

  // write data to request body
  req.write(postData);
  req.end();

}

// start processing the command
_handleCommand(command, function(err, message) {
  if (message) {
    console.log((err ? ('Error: ') : '') + message);
  }

  if (err) {
    process.exit(1);
  }
  process.exit(0);
});

