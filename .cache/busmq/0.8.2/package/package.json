{"name":"busmq","version":"0.8.2","description":"A high performance, highly-available and scalable, message bus and queueing system for node.js backed by Redis","author":{"name":"Capriza Inc.","email":"backend@capriza.com"},"maintainers":[{"name":"Nadav Fischer","email":"nadav.fischer@capriza.com"}],"homepage":"http://github.com/capriza/node-busmq","repository":{"type":"git","url":"http://github.com/capriza/node-busmq.git"},"bugs":{"url":"https://github.com/capriza/node-busmq/issues"},"keywords":["bus","message","queue","mq","channel","federation","redis","reliable","guarantee"],"dependencies":{"redis":"0.12.1","hiredis":"0.1.17","ws":"0.4.32","websocket-stream":"1.0.2","dnode":"1.2.0"},"optionalDependencies":{"ws":"0.4.32","websocket-stream":"1.0.2","dnode":"1.2.0"},"devDependencies":{"should":"4.0.4","mocha":"1.21.4"},"engines":{"node":">=0.10.3"},"main":"index.js","files":["index.js","lib"],"license":"MIT","scripts":{"test":"mocha test"},"readme":"# node-busmq\n\n![Build Status](https://travis-ci.org/capriza/node-busmq.svg?branch=master)\n\nA high performance, highly available and scalable, message bus and queueing system for node.js.\nMessage queues are backed by [Redis](http://redis.io/), a high performance, in-memory key/value store.\n\n### The Basics\n\n* Event based message queues\n* Event based bi-directional channels for peer-to-peer communication (backed by message queues)\n* Reliable delivery of messages (AKA Guarantee Delivery)\n* Persistent Publish/Subscribe\n* Federation over distributed data centers\n* Auto expiration of queues after a pre-defined idle time\n* Scalability through the use of multiple redis instances and node processes\n* High availability through redis master-slave setup and stateless node processes\n* Tolerance to dynamic addition of redis instances during scale out\n* Fast\n\n### Why Yet Another \"Queue-Backed-by-Redis\" Module?\n\nThere are several exiting node modules that provide great queues-backed-by-redis functionality,\nsuch as [Kue](https://github.com/learnboost/kue), [Bull](https://github.com/OptimalBits/bull) and\n[Convoy](https://github.com/gosquared/convoy), so what's so special about busmq?\n\nAlthough seemingly the other modules provide similar features, they lack a very specific feature that's required\nfor a reliable message queue: guaranteed order. *Jobs* is the main focus for these modules, whereas busmq focuses on\n*messages*.\n\nInherently, job processing does not require a certain order - if a job fails it can simply be retried\nat a later time with (usually) no ill-effects. However, message processing is very order dependant - if you receive a message\nout of order then there's no telling what the consequences may be. A good example is\n[TCP message order importance](http://en.wikipedia.org/wiki/Out-of-order_delivery) - clients are guaranteed\nthat TCP packets are *always* received in the correct order. That's what busmq focuses on, which makes busmq much\nmore like [RabbitMQ](http://www.rabbitmq.com/) rather than a generic queueing system.\n\nOf course, the other modules may double as messages queues, but that's just not their main focus. In addition, busmq\nprovides built-in features for peer-to-peer communication, scaling, high-availability and federation which are extremely important for a reliable\nmessaging system.\n\n### High Availability and Scaling\n\nScaling is achieved by spreading queues and channels between multiple redis instances.\nThe redis instance is selected by performing a calculation on the queue/channel name.\nIf the redis instances are added and the designated redis instance of a queue changes because of it then\nthe bus will still find the correct redis instance. There will be some time penalty until the system\nstabilizes after the addition.\n\nHigh availability for redis is achieved by using standard redis high availability setups, such as\n[Redis Sentinal](http://redis.io/topics/sentinel) or [AWS ElasticCache](http://aws.amazon.com/elasticache/)\n\n## Bus\n\nThe bus holds connections to one or more redis instances and is used\nto create `queue`s, `channel`s and `persistent` objects.\n\nNode processes connecting to the same bus have access to and can use all queues, channels and persistent objects.\n\nnode-busmq uses the great [node_redis](https://github.com/mranney/node_redis) module to communicate with the redis instances,\nso it is highly recommended to also install [hiredis](https://github.com/redis/hiredis-node) to\nachieve the best performance.\n\n#### Connecting to a bus\n\n```javascript\nvar Bus = require('busmq');\nvar bus = Bus.create({redis: ['redis://192.168.0.1:6359', 'redis://192.168.0.2:6359']);\nbus.on('error', function(err) {\n  // an error has occurred\n});\nbus.on('online', function() {\n  // the bus is online - we can use queues, channels ans persistent objects\n});\nbus.on('offline', function() {\n  // the bus is offline - redis is down...\n});\n\n// connect the redis instances\nbus.connect();\n```\n\n## Queue\n\nA queue of messages.\n\nMessages are pushed to the queue and consumed from it in they order that they were pushed.\n\nAny number of clients can produce messages to a queue, and any number of consumers\ncan consume messages from a queue.\n\n#### Attach and Detach\n\nPushing messages and consuming them requires attaching to the queue.\nThe queue will remain in existence for as long as it has at least one client attached to it.\n\nTo stop using a queue, detach from it. Once a queue has no more clients attached, it will automatically expire\nafter a predefined ttl (also losing any messages in it).\n\n#### Using a queue\n\nProducer:\n\n```javascript\nbus.on('online', function() {\n  var q = bus.queue('foo');\n  q.on('attached', function() {\n    console.log('attached to queue');\n  });\n  q.attach();\n  q.push({hello: 'world'});\n  q.push('my name if foo');\n});\n```\n\nConsumer:\n\n```javascript\nbus.on('online', function() {\n  var q = bus.queue('foo');\n  q.on('attached', function() {\n    console.log('attached to queue. messages will soon start flowing in...');\n  });\n  q.on('message', function(message, id) {\n    if (message === 'my name if foo') {\n      q.detach();\n    }\n  });\n  q.attach();\n  q.consume(); // the 'message' event will be fired when a message is retrieved\n});\n```\n\n#### Consumption Modes\n\nThere are three modes that messages can be consumed from a queue, with various degrees of\nflexibility for each mode.\n\n##### Unreliable Delivery\n\nThis is a *Zero-or-Once* message delivery mode, which is also the default mode.\nMessages are consumed from the queue by one consumer only and will not be consumed again by that consumer or any other consumer.\nThis method of consumption is unreliable in a sense that if the consumer crashes before being able to\nhandle the message, it is lost forever.\n\n```javascript\n// consume with default settings\nq.consume();\n\n// this is the same as the default settings\nq.consume({reliable: false, remove: true});\n```\n\n##### Reliable Delivery (Guarantee Delivery)\n\nThis is a *Once-or-More* message delivery mode, where it is guaranteed that messages will be delivered at least once.\nEvery consumed message enters a 'waiting for ack' state. The consumer should call 'ack' on a message in order to\nmark it as handled. When the client issues an 'ack' on the message, the message\nis permanently discarded from the queue and will not be consumed again.\n\nIf a client crashes when consuming in this mode, any messages that have not been ACKed will be delivered once more\nwhen a client starts to consume again.\n\n*Note:* This mode does not work well with multiple consumers. The behavior of multiple clients consuming in reliable\nmode from the same queue is undefined.\n\n```javascript\n// consume message reliably. message with id 3 is the last acked message\nq.consume({reliable: true, last: 3});\n```\n\n##### Persistent Publish/Subscribe\n\nThis is a form of publish/subscribe, where all consumers receive all messages, even if they were not consuming at the time messages were\nbeing pushed to the queue. A consumer can also specify the index of the message to start consuming from.\n\n```javascript\n// consume message without removing them from the queue. start consuming from message at index 0.\nq.consume({remove: false, index: 0});\n```\n\n## Channel\n\nA bi-directional channel for peer-to-peer communication. Under the hood, a channel uses two message queues,\nwhere each peer pushes messages to one queue and consumes messages from the other queue.\nIt does not matter which peer connects to the channel first.\n\nEach peer in the channel has a role. For all purposes roles are the same, except that the roles determine to which\nqueue messages will be pushed and from which queue they will be consumed. To peers to communicate over the channel, they must have opposite roles.\n\nBy default, a channel uses role `local` to consume messages and `remote` to push messages.\nSince peers must have opposite roles, if using the default roles, one peer must call `channel#listen` and the other peer must call `channel#connect`.\n\nIt is also possible to specify other roles explicitly, such as `client` and `server`.\nThis enables specifying the local role and the remote role, and just connecting the channel without calling `listen`.\nSpecifying roles explicitly may add to readability, but not much more than that.\n\nA channel supports the same consumption modes as a queue does. See [Consumption Modes](#consumption-modes) for details.\n\n#### Using a channel (default roles)\n\nServer endpoint:\n\n```javascript\nbus.on('online', function() {\n  var c = bus.channel('bar'); // use default names for the endpoints\n  c.on('connected', function() {\n    // connected to the channel\n  });\n  c.on('remote:connected', function() {\n    // the client is connected to the channel\n    c.send('hello client!');\n  });\n  c.on('message', function(message) {\n    // received a message from the client\n  });\n  c.listen(); // reverse the endpoint roles and connect to the channel\n});\n```\n\nClient endpoint:\n\n```javascript\nbus.on('online', function() {\n  var c = bus.channel('bar'); // use default names for the endpoints\n  c.on('connected', function() {\n    // connected to the channel\n  });\n  c.on('remote:connected', function() {\n    // the server is connected to the channel\n    c.send('hello server!');\n  });\n  c.on('message', function(message) {\n    // received a message from the server\n  });\n  c.connect(); // connect to the channel\n});\n```\n\n#### Using a channel (explicit roles)\n\nServer endpoint:\n\n```javascript\nbus.on('online', function() {\n  // local role is server, remote role is client\n  var c = bus.channel('zoo', 'server', 'client');\n  c.on('connected', function() {\n    // connected to the channel\n  });\n  c.on('remote:connected', function() {\n    // the client is connected to the channel\n    c.send('hello client!');\n  });\n  c.on('message', function(message) {\n    // received a message from the client\n  });\n  c.connect(); // connect to the channel\n});\n```\n\nClient endpoint:\n\n```javascript\nbus.on('online', function() {\n  // notice the reverse order of roles\n  // local role is client, remote role is server\n  var c = bus.channel('zoo', 'client', 'server');\n  c.on('connected', function() {\n    // connected to the channel\n  });\n  c.on('remote:connected', function() {\n    // the server is connected to the channel\n    c.send('hello server!');\n  });\n  c.on('message', function(message) {\n    // received a message from the server\n  });\n  c.connect(); // connect to the channel\n});\n```\n\n## Persistable\n\nIt is possible to persist arbitrary objects to the bus.\nA persistable object defines a set of properties on the object that are tracked for modification. When\nsaving a dirty object (where dirty means that some tracked properties have changed) only those dirty properties are\npersisted to the bus. Loading a persistable object reads all of the persisted properties.\n\n```javascript\nbus.on('online', function() {\n  var object = {field: 'this field is not persisted'};\n  var p = bus.persistify('obj', object, ['foo', 'bar', 'zoo']);\n  p.foo = 'hello';\n  p.bar = 1;\n  p.zoo = true;\n  p.save(function(err) {\n    // foo, bar and zoo fields have been saved\n  });\n\n  p.foo = 'world';\n  p.save(function(err) {\n    // only foo has been saved\n  });\n\n  // load the persistified properties\n  var p2 = bus.persistify('obj', {}, ['foo', 'bar', 'zoo']);\n  p2.load(function(err, exists) {\n    // exists == true\n    // p2.foo == 'world'\n    // p2.bar == 2\n    // p2.zpp == true'\n  });\n});\n```\n\n## Federation\n\nIt is sometimes desirable to setup bus instances in different locations, where redis\nservers of one location are not directly accessible to other locations. This setup is very common\nwhen building a bus that spans several data centers, where each data center is isolated behind a firewall.\n\nFederation enables using queues, channels and persisted objects of a bus without access to the redis servers themselves.\nWhen federating an object, the federating bus uses web sockets to the target bus as the federation channel,\nand the target bus manages the object on its redis servers on behalf of the federating bus.\nThe federating bus does not host the federated objects on the local redis servers.\n\nFederation is done over web sockets since they are firewall and proxy friendly.\n\nThe federating bus utilizes a simple pool of hot-connected web sockets. When a bus is initialized, it immediately\nspins up an initial number of web sockets that connect to other bus instances. When federating an object, the bus\nselects a web socket from the pool and starts federating the object over it. Once a web socket is given for federation from the\npool, the pool immediately opens a new web socket to replace the one that was just given. This way, the pool\nalways contains a minimum number of available web sockets for immediate use.\nThis behavior provides the best performance by eliminating the need to wait for the web socket to open when starting to federate.\n\nThe API and events of a federated objects are exactly the same as a non-federated objects. This is achieved\nusing the awesome [dnode](https://github.com/substack/dnode) module for RPCing the object API.\n\n#### Opening a bus with a federation server\n\n```javascript\nvar http = require('http');\nvar httpServer = http.createServer(); // create the http server to serve as the federation server. you can also use express if you like...\nhttpServer.listen(8881);\nvar Bus = require('busmq');\nvar options = {\n  redis: 'redis://127.0.0.1', // connect this bus to a local running redis\n  federate: { // also open a federation server\n    server: httpServer,  // use the provided http server as the federation server\n    secret: 'mysecret',   // a secret key for authorizing clients\n    path: '/my/fed/path'\n  }\n};\nvar bus = Bus.create(options);\nbus.on('online', function() {\n  // the bus is now ready to receive federation requests\n});\nbus.connect();\n```\n\n#### Federating a queue\n\n```javascript\nvar Bus = require('busmq');\nvar options = {\n  redis: 'http://127.0.0.1', // connect this bus to a local running redis\n  federate: { // also connect to a federate bus\n    poolSize: 5, // keep the pool size with 5 web sockets\n    urls: ['http://my.other.bus:8881'],  // pre-connect to these urls, 5 web sockets to each url\n    secret: 'mysecret',  // the secret ket to authorize with the federation server\n    path: '/my/fed/path'\n  }\n};\nvar bus = Bus.create(options);\nbus.on('online', function() {\n // federate the queue to a bus located at a different data center\n var fed = bus.federate(bus.queue('foo'), 'http://my.other.bus');\n fed.on('ready', function(q) {\n   // federation is ready - we can start using the queue\n   q.on('attached', function() {\n     // do whatever\n   });\n   q.attach();\n });\n});\n```\n\n#### Federating a channel\n\n```javascript\nvar Bus = require('busmq');\nvar options = {\n  redis: 'redis://127.0.0.1', // connect this bus to a local running redis\n  federate: { // also connect to a federate bus\n    poolSize: 5, // keep the pool size with 5 web sockets\n    urls: ['http://my.other.bus:8881'],  // pre-connect to these urls, 5 web sockets to each url\n    secret: 'mysecret',  // the secret ket to authorize with the federation server\n    path: '/my/fed/path'\n  }\n};\nvar bus = Bus.create(options);\nbus.on('online', function() {\n // federate the channel to a bus located at a different data center\n var fed = bus.federate(bus.channel('bar'), 'http://my.other.bus');\n fed.on('ready', function(c) {\n   // federation is ready - we can start using the channel\n   c.on('message', function(message) {\n     // do whatever\n   });\n   c.attach();\n });\n});\n```\n\n#### Federating a persistable object\n\n```javascript\nvar Bus = require('busmq');\nvar options = {\n  redis: 'http://127.0.0.1', // connect this bus to a local running redis\n  federate: { // also connect to a federate bus\n    poolSize: 5, // keep the pool size with 5 web sockets\n    urls: ['http://my.other.bus:8881'],  // pre-connect to these urls, 5 web sockets to each url\n    secret: 'mysecret',  // the secret ket to authorize with the federation server\n    path: '/my/fed/path'\n  }\n};\nvar bus = Bus.create(options);\nbus.on('online', function() {\n // federate the persistent object to a bus located at a different data center\n var fed = bus.federate(bus.persistify('bar', object, ['field1', 'field2']), 'http://my.other.bus');\n fed.on('ready', function(p) {\n   // federation is ready - we can start using the persisted object\n   p.load(function(err, exists) {\n     // do whatever\n   });\n });\n});\n```\n\n## Performance\n\nPerformance was measured with two key indicators in mind:\n\n* Message Throughput - the number of messages per second that can be pushed and consumed from a queue\n* Message Throughout Consistency - how consistent the throughput is over time\n\nThere is also a third indicator that might be interesting to examine and that is \"Queue Open/Close Throughout\".\nI'm pretty sure there's place for improvement there, so no benchmarking was performed in that area.\n\n#### Environment\n\nThe benchmark was performed on two [c3.xlarge AWS machines](http://aws.amazon.com/ec2/instance-types/) running Debian 7.\nEach machine has 4 Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz and 7.5GB of RAM.\n\nOne machine was setup to run 4 instances of redis 2.8.19. Redis is single threaded so it can only utilize one CPU.\n\nA second machine was setup to run 4 node busmq processes executing the benchmarking code.\nEach one of the 4 node processes connected to all of the 4 redis instances running on the first machine.\n\n#### Benchmark\n\nThe benchmark flow is as follows:\n\n* start up 4 node processes (one per cpu)\n* on startup, the node process creates 100 queues\n* once all the nodes of all the processes have been created, every process performs:\n  * initiate a report cycle of 2 seconds\n  * push/consume 32 byte messages as fast as possible to/from all queues\n  * report the number of pushed and consumed messages per cycle\n  * reset the pushed and consumed message counters at the end of every cycle\n* run a total of 100 cycles\n\n#### Results\n\nBenchmarks are only good for what they actually measure.\nThere are always use cases that do no align with the results so be careful with any conclusions.\nIt's advised to perform your own performance tests with *your* use cases and setups in mind.\n\nOn average, the benchmark shows every second about 10400 messages were pushed and 9973 messages were consumed.\nIt is also apparent that the push/consume throughput is quite consistent over time.\n(The X-axis shows the cycle number, the Y-axis shows the number of messages)\n\n![Benchmark results](benchmark/results/busmq-benchmark.png)\n\nAdditional testing indicates that the size of the messages has little to no impact on the throughput.\nHowever, increasing the number of queues by an order of magnitude does effect the performance.\n\n## API\n\nEnough with examples. Let's see the API.\n\n### Bus API\n\n##### bus#create([options])\n\nCreate a new bus instance. Options:\n\n* `redis` -  specified the redis servers to connect to. Can be a string or an array of string urls. A valid url has the form `redis://<host_or_ip>[:port]`.\n* `federate` - an object defining federation options:\n  * `server` -  an http/https server object to listen for incoming federation connections. if undefined then federation server will not be open\n  * `path` - the path within the server to accept federation requests on\n  * `urls` - an array of urls of the form `http[s]://<ip-or-host>[:port]` of other bus instances that this bus can federate to. default is an empty array.\n  * `poolSize` - the number of web sockets to keep open and idle at all times to federated bus instances. default is 10.\n  * `secret` - a secret key to be shared among all bus instances that can federate to each other. default is `notsosecret`.\n* `logger` - the logger that the bus should use\n\nCall `bus#connect` to connect to the redis instances and to open the federation server.\n\n##### bus#withLog(log)\n\nAttach a logger to the bus instance. Returns the bus instance.\n\n##### bus#withRedis(redis)\n\nUse the provided `node_redis` client to create connections. Returns the bus instance.\n\n##### bus#connect()\n\nConnect to the redis servers and start the federation server (if one was specified). Once connected to all redis instances, the `online` will be emitted.\nIf the bus gets disconnected from the the redis instances, the `offline` event will be emitted.\n\n##### bus#disconnect()\n\nDisconnect from the redis instances and stop the federation server. Once disconnected, the `offline` event will be emitted.\n\n##### bus#isOnline()\n\nReturn `true` if the bus is online, `false` if the bus offline.\n\n##### bus#queue(name)\n\nCreate a new [Queue](#queue) instance.\n\n* `name` - the name of the queue.\n\nReturns a new Queue instance. Call `queue#attach` before using the queue.\n\n##### bus#channel(name [, local, remote])\n\nCreate a new [Channel](#channel) instance.\n\n* `name` - the name of the channel.\n* `local` - \\[optional\\] specifies the local role. default is `local`.\n* `remote` - \\[optional\\] specifies the remote role. default is `remote`.\n\n##### bus#persistify(name, object, properties)\n\nCreate a new [Persistable](#persistable) object. Persistifying an object adds additional methods to the persistified object.\nSee the  API for more details.\n\n* `name` - the name of the persisted object.\n* `object` - the object to persistify.\n* `properties` - an array of property names to persist.\n\n##### bus#federate(object, target)\n\nFederate `object` to the specified `target` instead of hosting the object on the local redis servers.\nDo not use any of the object API's before federation setup is complete.\n\n* `object` - `queue`, `channel` or `persisted` objects to federate. These are created normally through `bus#queue`, `bus#channel` and `bus#persistify`.\n* `target` - the target bus url or an already open websocket to the target bus. The url has the form `http[s]://<location>[:<port>]`\n\n#### Bus Events\n\n* `online` - emitted when the bus has successfully connected to all of the specified redis instances\n* `offline` - emitted when the bus loses connections to the redis instances\n* `error` - an error occurs\n\n### Queue API\n\n##### queue#attach([options])\n\nAttach to the queue. If the queue does not already exist it is created.\nOnce attached, the `attached` event is emitted.\n\nOptions:\n\n* `ttl` - duration in seconds for the queue to live without any attachments. default is 30 seconds.\n\n##### queue#detach()\n\nDetach from the queue. The queue will continue to live for as long as it has at least one attachment.\nOnce a queue has no more attachments, it will continue to exist for the predefined `ttl`, or until it\nis attached to again.\n\n##### queue#push(message)\n\nPush a message to the queue. The message can be a JSON object or a string. \nThe message will remain in the queue until it is consumed by a consumer.\n\n##### queue#consume([options])\n\nStart consuming messages from the queue.\nThe `message` event is emitted whenever a message is consumed from the queue.\n\nOptions:\n* `max` if specified, only `max` messages will be consumed from the queue. If not specified,\nmessages will be continuously consumed as they are pushed into the queue.\n* `remove` - `true` indicates to remove a read message from the queue, and `false` leaves it in the queue so that it may be read once more. default is `true`.\n*Note*: The behavior of mixing consumers that remove messages with consumers that do not remove messages from the same queue is undefined.\n* `reliable` - applicable only if `remove` is `true`. indicates that every consumed message needs to be ACKed in order not to receive it again in case of\ncalling `consume` again. see `queue#ack` for ack details. default is `false`.\n* `last` - applicable only if `reliable` is `true`. indicates the last message id that was ACKed so that only messages with higher id's should be received.\nif any messages still exist in the queue with id's lower than `last` they will be discarded.\nthis behaves exactly like calling `queue#ack` with the last id before starting to consume. default is 0.\n\n##### queue#ack(id)\n\nSpecifies that the message with the specified id, and all messages with lower id's, can safely be discarded so that\nthey should never be consumed again. Ignored if not consuming in reliable mode.\n\n* `id` - the message id to ack\n\n##### queue#isConsuming([callback])\n\nReturns `true` if this client is consuming messages, `false` otherwise.\n\n##### queue#stop()\n\nStop consuming messages from the queue.\n\n##### queue#close()\n\nCloses the queue and destroys all messages. Emits the `closed` event once it is closed.\n\n##### queue#flush()\n\nEmpty the queue, removing all messages.\n\n##### queue#exists([callback])\n\nChecks if the queue already exists or not.\n\n* `callback` - receives `true` if the queue exists, `false` otherwise\n\n##### queue#count([callback])\n\nReturns the number if messages in the queue.\n\n* `callback` - receives the number of messages in the queue\n\n##### queue#ttl([callback])\n\nReturns the time in seconds for the queue to live without any attachments.\n\n* `callback` - receives the ttl in seconds\n\n##### queue#metadata(key [, value][, callback])\n\nGet or set arbitrary metadata on the queue.\nWill set the metadata `key` to the provided `value`, or get the current value of the key if the `value` parameter is not provided.\n\n* `key` - the metadata key to set or get\n* `value` - \\[optional\\] the value to set on the key.\n* `callback` - if setting a metadata value, it is called with no arguments upon success. if retrieving the value,\n it be called with the retrieved value.\n\n##### queue#pushed([callback])\n\nReturns the number of messages pushed by this client to the queue\n\n##### queue#consumed([callback])\n\nReturns the number of messages consumed by this client from the queue\n\n#### Queue Events\n\n* `attaching` - emitted when starting to attach\n* `attached` - emitted when attached to the queue. The listener callback receives `true` if the queue already exists\nand `false` if it was just created.\n* `detaching` - emitted when starting to detach\n* `detached` - emitted when detached from the queue. If no other clients are attached to the queue, the queue will remain alive for the `ttl` duration\n* `consuming` - emitted when starting or stopping to consume messages from the queue. The listener callback will receive `true`\nif starting to consume and `false` if stopping to consume.\n* `message` - emitted when a message is consumed from the queue. The listener callback receives the message as a string and the id of the message as an integer.\n* `error` - emitted when some error occurs. The listener callback receives the error.\n\n### Channel API\n\n##### channel#connect()\n\nConnects to the channel. The `connect` event is emitted once connected to the channel.\n\n##### channel#attach()\n\nAlias to `channel#connect()`\n\n##### channel#listen()\n\nConnects to the channel with reverse semantics of the roles. \nThe `connect` event is emitted once connected to the channel.\n\n##### channel#send(message)\n\nSend a message to the peer. The peer does need to be connected for a message to be sent.\n\n##### channel#sendTo(endpoint, message)\n\nSend a message to the the specified endpoint. There is no need to connect to the channel with `channel#connect` or `channel#listen`.\n\n##### channel#disconnect()\n\nDisconnect from the channel. The channel remains open and a different peer can connect to it.\n\n##### channel#detach()\n\nAlias to `channel#disconnect()`\n\n##### channel#end()\n\nEnd the channel. No more messages can be pushed or consumed. This also caused the peer to disconnect from the channel and close the message queues.\n\n##### channel#ack(id)\n\nSee [queue#ack](#queueackid) for details\n\n##### channel#isAttached([callback])\n\nReturns `true` if connected to the channel, `false` if not connected.\n\n#### Channel Events\n\n* `connect` - emitted when connected to the channel\n* `remote:connect` - emitted when a remote peer connects to the channel\n* `disconnect` - emitted when disconnected from the channel\n* `remote:disconnect` - emitted when the remote peer disconnects from the channel\n* `message` - emitted when a message is received from the channel. The listener callback receives the message as a string.\n* `end` - emitted when the remote peer ends the channel\n* `error` - emitted when an error occurs. The listener callback receives the error.\n\n#### Persistable API\n\n##### persistable#save(callback)\n\nSave all the dirty properties. The dirty properties are marked as not dirty after the save completes.\n\n* `callback` - called when the save has finished. has the form `function(err)`.\n\n##### persistable#load(callback)\n\nLoad all the tracked properties. All properties are marked as not dirty after the load completes.\n\n* `callback`  - called when the load has finished. has the form `function(err, exists)`\nwhere `exists` is true if the persisted object was found in the bus.\n\n##### persistable#persist(ttl)\n\nStart a periodic timer to continuously mark the persisted object as being used.\n\n* `ttl` specifies the number of seconds to keep the object alive in the bus.\n\n##### persistable#unpersist()\n\nStop the periodic timer. This will cause object to expire after the defined ttl provided in the persist method.\n\n#### Federate API\n\n##### federate#close(disconnect)\n\nClose the federation object.\n\n* `disconnect` - true to disconnect the underlying websocket\n\n#### Federate Events\n\n* `ready` - emitted when the federation setup is ready. The callback receives the bus object to use.\n* `unauthorized` - incorrect secret key was used to authenticate with the federation server\n* `close` - the federation connection closed\n* `error` - some error occurred. the callback receives the `error` message\n\n\n## Tests\n\nRedis server must be installed to run the tests, but does not need to be running.\nDownload redis from http://redis.io.\n\nTo run the tests: `./node_modules/mocha/bin/mocha test`\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Capriza Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n","readmeFilename":"README.md","_id":"busmq@0.8.2","_shasum":"6d85203ec7ce633f2b812ac0ed256f81de976775","_resolved":"http://registry.npmjs.org/busmq/-/busmq-0.8.2.tgz","_from":"http://registry.npmjs.org/busmq/-/busmq-0.8.2.tgz"}